""" COMP 163 - Project 1: Character Creator & Saving/Loading
Name: Arina Safrit
Date: 10/28/2025
AI Usage: Used AI to help create code after attempting to write it myself. I went through and corrected the code to fit to specifications required for project. VSC assisted in identifying syntax errors errors that pytesting identified.
"""
import os

def create_character(name, character_class, level = 1, gold = 100):
    """
    Creates a new character dictionary with calculated stats
    Returns: dictionary with keys: name, class, level, strength, magic, health, gold
    Example:
    char = create_character("Aria", "Mage") # Should return: {"name": "Aria", "class": "Mage", "level": 1, "strength": 5, "magic": 15, "health": 80, "gold": 100}
    """
    # Fix 2: call calculate_stats and check if it returns None (indicating invalid class)
    tempcharacter_stats = calculate_stats(character_class, level)
    if tempcharacter_stats is None:
        print(f"Error: Invalid character class '{character_class}'")
        return None

    character = {
        "name": name,
        "class": character_class,
        "level": level,
        "strength": tempcharacter_stats['strength'],
        "magic": tempcharacter_stats['magic'],
        "health": tempcharacter_stats['health'],
        "gold": gold
    }
    return character

def calculate_stats(character_class, level):
    """
    Calculates base stats based on class and level
    Returns: dictionary of (strength, magic, health) or None if class invalid
    Design your own formulas! Ideas:
    - Warriors: High strength, low magic, high health
    - Mages: Low strength, high magic, medium health
    - Rogues: Medium strength, medium magic, low health
    - Clerics: Medium strength, high magic, high health
    """
    # Fix 1: Return a dictionary instead of a tuple, and None for an invalid class
    if character_class == "Warrior":
        strength = 10 + level * 4
        magic = 5 + level * 2
        health = 20 + level * 3
    elif character_class == "Mage":
        strength = 5 + level * 3
        magic = 15 + level * 4
        health = 20 + level * 2
    elif character_class == "Rogue":
        strength = 15 + level * 4
        magic = 15 + level * 3
        health = 10 + level * 2
    elif character_class == "Cleric":
        strength = 10 + level * 2
        magic = 20 + level * 4
        health = 20 + level * 8
    else:
        return None # Return None for invalid class

    return {"strength": strength, "magic": magic, "health": health}

def save_character(character, filename):
    """ Saves character to a text file. Returns True if successful, False if not. """
    # Check for invalid absolute paths
    if filename.startswith('/'):
        print(f"Error saving character to {filename}: Invalid path")
        return False
    # Check if character is None
    if character is None:
        print("Error: Cannot save a None character.")
        return False

    # Get the directory path
    directory = os.path.dirname(filename)
    # If directory is specified and doesn't exist, fail
    if directory and not os.path.exists(directory):
        print(f"Error saving character to {filename}: Directory does not exist")
        return False
    # Check write permission if directory exists
    if directory and not os.access(directory, os.W_OK):
        print(f"Error saving character to {filename}: No write permission in directory")
        return False
    # Check if filename is a directory
    if os.path.isdir(filename):
        print(f"Error saving character to {filename}: Target is a directory")
        return False

    # Write the file
    try:
        with open(filename, "w", encoding="utf-8") as f:
            f.write(f"Character Name: {character['name']}\n")
            f.write(f"Class: {character['class']}\n")
            f.write(f"Level: {character['level']}\n")
            f.write(f"Strength: {character['strength']}\n")
            f.write(f"Magic: {character['magic']}\n")
            f.write(f"Health: {character['health']}\n")
            f.write(f"Gold: {character['gold']}\n")
        return True
    except IOError as e:
        print(f"Error saving character to {filename}: {e}")
        return False

def load_character(filename):
    """
    Loads character from text file.
    Returns: character dictionary if successful, None if file not found or other errors.
    """
    # Check if file exists
    if not os.path.exists(filename):
        print(f"File '{filename}' not found.")
        return None
    # Check read permissions
    if not os.access(filename, os.R_OK):
        print(f"Error loading character from {filename}: No read permission")
        return None
    # Check if filename is a directory
    if os.path.isdir(filename):
        print(f"Error loading character from {filename}: Target is a directory")
        return None

    # Read the file
    try:
        with open(filename, "r", encoding="utf-8") as f:
            lines = f.readlines()
    except IOError as e:
        print(f"Error loading character from {filename}: {e}")
        return None

    # Parse character data
    character = {}
    field_map = {
        "Character Name": "name",
        "Class": "class",
        "Level": "level",
        "Strength": "strength",
        "Magic": "magic",
        "Health": "health",
        "Gold": "gold"
    }

    for line in lines:
        if ": " in line:
            key, value = line.strip().split(": ", 1)
            if key in field_map:
                field_name = field_map[key]
                # Convert numeric values to integers
                if field_name in ["level", "strength", "magic", "health", "gold"]:
                    # Validate numeric content before converting
                    if value.isdigit():
                        character[field_name] = int(value)
                    else:
                        print(f"Error loading character from {filename}: Invalid number for {field_name}")
                        return None
                else:
                    character[field_name] = value

    # Verify all required fields are present
    required_fields = ["name", "class", "level", "strength", "magic", "health", "gold"]
    if all(field in character for field in required_fields):
        return character
    else:
        print(f"Error: File {filename} is missing required fields")
        return None

def display_character(character):
    """
    Prints formatted character sheet
    Returns: None (prints to console)
    Example output:
    === CHARACTER SHEET ===
    Name: Aria
    Class: Mage
    Level: 1
    Strength: 5
    Magic: 15
    Health: 80
    Gold: 100
    """
    # Check if character is None
    if character is None:
        print("Error: Cannot display a None character.")
        return None

    print("=== CHARACTER SHEET ===")
    print(f"Name: {character['name']}")
    print(f"Class: {character['class']}")
    print(f"Level: {character['level']}")
    print(f"Strength: {character['strength']}")
    print(f"Magic: {character['magic']}")
    print(f"Health: {character['health']}")
    print(f"Gold: {character['gold']}")
    return None

def level_up(character):
    """
    Increases character level and recalculates stats
    Modifies the character dictionary directly
    Returns: None
    """
    # Check if character is None
    if character is None:
        print("Error: Cannot level up a None character.")
        return None

    print(f"\n{character['name']} is leveling up!")
    character['level'] += 1
    # Fix 1: calculate_stats now returns a dictionary
    new_stats = calculate_stats(character['class'], character['level'])

    # Update stats if they increase
    # Fix 1: Accessing stats from the dictionary
    stat_updates = [
        ('strength', new_stats['strength']),
        ('magic', new_stats['magic']),
        ('health', new_stats['health'])
    ]

    print("Stat increases:")
    for stat_name, new_value in stat_updates:
        increase = new_value - character[stat_name]
        if increase > 0:
            print(f"  {stat_name.capitalize()}: +{increase}")
            character[stat_name] = new_value
    print(f"New level: {character['level']}")
    return None

if __name__ == "__main__":
    # Example usage:
    # char = create_character("TestHero", "Warrior")
    # display_character(char)
    # save_character(char, "my_character.txt")
    # loaded = load_character("my_character.txt")
    print("=== CHARACTER CREATOR ===")
    name = input("Enter your character's name: ")
    character_class = input("Enter your character's class (Warrior, Mage, Rogue, Cleric): ")

    # Create character
    character = create_character(name, character_class)

    # Fix 2: Check if character creation failed before proceeding
    if character is not None:
        print("\nCharacter Created Successfully!")
        display_character(character)

        # Save to file
        filename = f"{name}_character.txt"
        if save_character(character, filename):
            print(f"\nCharacter saved to {filename}")

            # Load and show again
            loaded_character = load_character(filename)
            if loaded_character is not None:
                print("\nCharacter Loaded From File:")
                display_character(loaded_character)

        # Level up demonstration
        level_up(character)
        print("\nAfter Level Up:")
        display_character(character)
    else:
        print("\nCharacter creation failed due to invalid class.")
